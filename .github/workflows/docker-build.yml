name: Docker Build and Push

on:
  # 通过tag触发，格式为 v*
  push:
    tags:
      - 'v*'
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      push_to_dockerhub:
        description: '是否推送到DockerHub'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      custom_tag:
        description: '自定义标签（可选）'
        required: false
        type: string

env:
  DOCKERHUB_NAMESPACE: lihongjie0209
  IMAGE_NAME: script-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录DockerHub
      if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          # Tag触发: v1.0.0 -> 1.0.0, latest
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # 主分支: main -> main
          type=ref,event=branch
          # PR: pr-123
          type=ref,event=pr
          # 手动触发自定义标签
          type=raw,value={{inputs.custom_tag}},enable=${{ github.event.inputs.custom_tag != '' }}
          # latest标签仅对tag和main分支
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
        labels: |
          org.opencontainers.image.title=GraalVM脚本执行服务
          org.opencontainers.image.description=基于GraalVM和Quarkus的多语言脚本执行服务，支持JavaScript、Python等脚本语言的安全执行
          org.opencontainers.image.vendor=lihongjie0209
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README_CN.md
    
    - name: 构建和推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
      
    - name: 验证镜像推送
      if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
      run: |
        echo "🔍 验证镜像推送状态..."
        
        # 获取主要标签
        MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "验证标签: $MAIN_TAG"
        
        # 等待一段时间让Docker Hub处理
        echo "⏳ 等待Docker Hub处理镜像..."
        sleep 30
        
        # 尝试拉取镜像验证
        if docker pull $MAIN_TAG; then
          echo "✅ 镜像推送验证成功"
          echo "IMAGE_VERIFIED=true" >> $GITHUB_ENV
        else
          echo "❌ 镜像推送验证失败"
          echo "IMAGE_VERIFIED=false" >> $GITHUB_ENV
        fi
    
    - name: 构建摘要
      run: |
        echo "## 🐳 Docker构建结果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏷️ 触发方式 | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 镜像名称 | \`${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ 构建平台 | linux/amd64 |" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true' }}" == "true" ]]; then
          echo "| 🚀 推送状态 | ✅ 已推送到DockerHub |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🚀 推送状态 | ⏸️ 仅构建，未推送 |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ 生成的标签:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/,/\n/g' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    # - name: 安全扫描
    #   if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
    #   uses: docker/scout-action@v1
    #   with:
    #     command: cves
    #     image: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
    #     only-severities: critical,high
    #     exit-code: false # 不因安全问题阻止发布
      

  test-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true') && needs.build-and-push.result == 'success'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=ref,event=branch
          type=raw,value={{inputs.custom_tag}},enable=${{ github.event.inputs.custom_tag != '' }}
    
    - name: 等待镜像推送完成
      run: |
        echo "⏳ 等待镜像推送完成..."
        sleep 60  # 等待1分钟确保镜像推送完成
    
    - name: 测试Docker镜像
      run: |
        echo "🧪 测试Docker镜像..."
        
        # 获取构建的标签
        DOCKER_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "测试镜像标签: $DOCKER_TAG"
        
        # 尝试拉取镜像，最多重试3次
        for i in {1..3}; do
          echo "第 $i 次尝试拉取镜像..."
          if docker pull $DOCKER_TAG; then
            echo "✅ 镜像拉取成功"
            break
          else
            echo "❌ 镜像拉取失败，等待30秒后重试..."
            if [ $i -eq 3 ]; then
              echo "❌ 镜像拉取最终失败，跳过镜像测试"
              echo "⚠️ 这可能是由于Docker Hub同步延迟造成的，部署可以继续进行"
              exit 0  # 不阻止后续步骤
            fi
            sleep 30
          fi
        done
        
        # 启动容器（后台运行）
        echo "🚀 启动测试容器..."
        docker run -d --name test-container -p 8080:8080 $DOCKER_TAG
        
        # 等待服务启动
        echo "⏳ 等待服务启动..."
        for i in {1..12}; do  # 最多等待2分钟
          sleep 10
          if docker ps | grep test-container > /dev/null; then
            echo "✅ 容器正在运行"
            break
          else
            echo "⏳ 容器启动中... ($i/12)"
            if [ $i -eq 12 ]; then
              echo "❌ 容器启动超时"
              docker logs test-container
              exit 1
            fi
          fi
        done
        
        # 检查服务健康状态
        echo "🔍 等待服务就绪..."
        for i in {1..20}; do  # 最多等待100秒
          sleep 5
          if curl -f -s http://localhost:8080/api/script/health > /dev/null 2>&1; then
            echo "✅ 健康检查通过"
            break
          else
            echo "⏳ 等待服务就绪... ($i/20)"
            if [ $i -eq 20 ]; then
              echo "❌ 健康检查超时失败"
              echo "容器日志："
              docker logs test-container
              exit 1
            fi
          fi
        done
        
        # 测试API功能
        echo "🧪 测试脚本执行API..."
        response=$(curl -s -X POST -H "Content-Type: application/json" \
          -d '{"script":"console.log(\"Hello World\"); 42","language":"js","entryFunction":"","args":[],"permissions":{"allowIO":false,"allowNetwork":false,"allowHostAccess":false,"allowFileAccess":false,"allowCreateThread":false,"allowEnvironmentAccess":false,"maxExecutionTime":5000,"maxMemoryUsage":134217728}}' \
          http://localhost:8080/api/script/execute)
        
        echo "API响应: $response"
        
        if echo "$response" | grep -q "42" && echo "$response" | grep -q "\"success\""; then
          echo "✅ API测试通过"
        else
          echo "❌ API测试失败"
          echo "容器日志："
          docker logs test-container
          exit 1
        fi
        
        # 测试WebSocket连接
        echo "🧪 测试WebSocket连接..."
        # 这里可以添加WebSocket测试，暂时跳过
        
        # 清理
        echo "🧹 清理测试环境..."
        docker stop test-container || true
        docker rm test-container || true
        
        echo "✅ 所有测试通过"


  release-notification:
    needs: [build-and-push, test-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: 发布通知
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "## 🎉 新版本发布成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 镜像信息" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **镜像**: \`${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **平台**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 使用方式" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# 拉取最新版本" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 运行容器" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 8080:8080 \\" >> $GITHUB_STEP_SUMMARY
        echo "  ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 访问服务" >> $GITHUB_STEP_SUMMARY
        echo "# Web界面: http://localhost:8080" >> $GITHUB_STEP_SUMMARY
        echo "# API文档: http://localhost:8080/q/swagger-ui" >> $GITHUB_STEP_SUMMARY
        echo "# 健康检查: http://localhost:8080/api/script/health" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  deploy-cloud-run:
    needs: [build-and-push, test-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 配置GCP身份验证
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: 设置Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: 提取版本号
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "image_uri=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
    
    - name: 部署到Cloud Run
      run: |
        echo "🚀 开始部署到GCP Cloud Run..."
        
        # 设置默认值
        SERVICE_NAME="${{ vars.CLOUD_RUN_SERVICE_NAME }}"
        if [ -z "$SERVICE_NAME" ]; then
          SERVICE_NAME="script-server"
        fi
        
        REGION="${{ vars.GCP_REGION }}"
        if [ -z "$REGION" ]; then
          REGION="asia-east2"
        fi
        
        MEMORY="${{ vars.CLOUD_RUN_MEMORY }}"
        if [ -z "$MEMORY" ]; then
          MEMORY="2Gi"
        fi
        
        CPU="${{ vars.CLOUD_RUN_CPU }}"
        if [ -z "$CPU" ]; then
          CPU="2"
        fi
        
        CONCURRENCY="${{ vars.CLOUD_RUN_CONCURRENCY }}"
        if [ -z "$CONCURRENCY" ]; then
          CONCURRENCY="100"
        fi
        
        MAX_INSTANCES="${{ vars.CLOUD_RUN_MAX_INSTANCES }}"
        if [ -z "$MAX_INSTANCES" ]; then
          MAX_INSTANCES="10"
        fi
        
        MIN_INSTANCES="${{ vars.CLOUD_RUN_MIN_INSTANCES }}"
        if [ -z "$MIN_INSTANCES" ]; then
          MIN_INSTANCES="0"
        fi
        
        TIMEOUT="${{ vars.CLOUD_RUN_TIMEOUT }}"
        if [ -z "$TIMEOUT" ]; then
          TIMEOUT="300"
        fi
        
        LOG_LEVEL="${{ vars.QUARKUS_LOG_LEVEL }}"
        if [ -z "$LOG_LEVEL" ]; then
          LOG_LEVEL="INFO"
        fi
        
        # 部署到Cloud Run
        gcloud run deploy $SERVICE_NAME \
          --image=${{ steps.version.outputs.image_uri }} \
          --platform=managed \
          --region=$REGION \
          --allow-unauthenticated \
          --port=8080 \
          --memory=$MEMORY \
          --cpu=$CPU \
          --concurrency=$CONCURRENCY \
          --max-instances=$MAX_INSTANCES \
          --min-instances=$MIN_INSTANCES \
          --timeout=$TIMEOUT \
          --set-env-vars="QUARKUS_LOG_LEVEL=$LOG_LEVEL" \
          --quiet
        
        echo "✅ Cloud Run部署完成"
    
    - name: 获取服务URL
      id: service-url
      run: |
        SERVICE_NAME="${{ vars.CLOUD_RUN_SERVICE_NAME }}"
        if [ -z "$SERVICE_NAME" ]; then
          SERVICE_NAME="script-server"
        fi
        
        REGION="${{ vars.GCP_REGION }}"
        if [ -z "$REGION" ]; then
          REGION="asia-east2"
        fi
        
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION \
          --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🌐 服务URL: $SERVICE_URL"
    

    
    - name: 部署总结
      run: |
        VERSION=${{ steps.version.outputs.version }}
        SERVICE_URL="${{ steps.service-url.outputs.url }}"
        
        SERVICE_NAME="${{ vars.CLOUD_RUN_SERVICE_NAME }}"
        if [ -z "$SERVICE_NAME" ]; then
          SERVICE_NAME="script-server"
        fi
        
        REGION="${{ vars.GCP_REGION }}"
        if [ -z "$REGION" ]; then
          REGION="asia-east2"
        fi
        
        echo "## 🌐 Cloud Run部署成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 部署信息" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **镜像**: \`${{ steps.version.outputs.image_uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **服务名**: \`$SERVICE_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "- **区域**: \`$REGION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **服务URL**: [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 快速访问" >> $GITHUB_STEP_SUMMARY
        echo "- [🌐 Web界面]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- [📚 API文档]($SERVICE_URL/q/swagger-ui)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 测试命令" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# 健康检查" >> $GITHUB_STEP_SUMMARY
        echo "curl $SERVICE_URL/api/script/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 脚本执行测试" >> $GITHUB_STEP_SUMMARY
        echo "curl -X POST -H \"Content-Type: application/json\" \\" >> $GITHUB_STEP_SUMMARY
        echo "     -d '{\"script\":\"console.log(\\\"Hello World\\\"); 42\",\"language\":\"js\",\"entryFunction\":\"\",\"args\":[],\"permissions\":{\"allowIO\":false,\"allowNetwork\":false,\"allowHostAccess\":false,\"allowFileAccess\":false,\"allowCreateThread\":false,\"allowEnvironmentAccess\":false,\"maxExecutionTime\":5000,\"maxMemoryUsage\":134217728}}' \\" >> $GITHUB_STEP_SUMMARY
        echo "     \"$SERVICE_URL/api/script/execute\"" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
